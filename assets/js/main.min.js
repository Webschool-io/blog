"use strict";var webschool=function(o,t,n){function a(){for(var o=this,t=arguments.length,n=Array(t),a=0;a<t;a++)n[a]=arguments[a];n.forEach(function(t){o[t.name]=t.method})}return{$inject:a}}(Zepto,window);!function(o,t,n){var a={name:"Router",method:function(o,t){for(var n=arguments.length,a=Array(n>2?n-2:0),e=2;e<n;e++)a[e-2]=arguments[e];a.forEach(function(n){return n.test(o)?t():-1})}};webschool.$inject(a)}(Zepto,window),function(o,t,n){var a={name:"$ajax",method:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"GET",a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"/search.json";o.ajax({url:a,method:n,dataType:"json",success:t,error:function(o){return new Error(o)}})}};webschool.$inject(a)}(Zepto,window),function(o,t,n,a){var e={name:"loadAuthors",method:function(){t.$ajax(function(n){n.map(function(o){return o.author}).forEach(function(n){t.$ajax(function(t){var a={name:o("#"+n+">.post-author-name"),photo:o("#"+n+">.post-author-photo")};a.name.text(t.name),a.photo.css("background-image","url('"+t.avatar_url+"')")},"GET","https://api.github.com/users/"+n)})})}};t.$inject(e)}(Zepto,webschool,window),function(o,t,n,a){var e={name:"loadListAuthors",method:function(){t.$ajax(function(n){n.map(function(o){return o.author}).forEach(function(n){t.$ajax(function(t){var a={name:o("#"+n+">.author-header>.author-name"),photo:o("#"+n+">.author-photo"),description:o("#"+n+">.author-header>.author-description")};a.photo.css("background-image","url('"+t.avatar_url+"')"),a.name.text(t.name),""===a.description.text()&&a.description.text(t.bio)},"GET","https://api.github.com/users/"+n)})})}};t.$inject(e)}(Zepto,webschool,window),function(o,t,n,a){({init:function(){this.toggleMenu(),this.handleRoutes()},toggleMenu:function(){o(".header-nav-menu").on("click",function(t){o(".wrapper").toggleClass("show")})},handleRoutes:function(){t.Router(n.location.pathname,t.loadAuthors,/\/blog\/$/),t.Router(n.location.pathname,t.loadAuthors,/\/blog\/+.+/),t.Router(n.location.pathname,t.loadListAuthors,/\/authors/)}}).init()}(Zepto,webschool,window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
